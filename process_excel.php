<?php
session_start();
date_default_timezone_set('Africa/Kampala');

// Ensure vendor/autoload.php exists
if (!file_exists('vendor/autoload.php')) {
    if (headers_sent()) { die('CRITICAL ERROR: Headers already sent. Composer autoload missing.'); }
    $_SESSION['error_message'] = 'Composer dependencies not installed. Please run "composer install".';
    // Assuming index.php is the dashboard, data_entry.php is the form page for uploads
    header('Location: index.php');
    exit;
}
require 'vendor/autoload.php';

// Ensure db_connection.php exists
if (!file_exists('db_connection.php')) {
    if (headers_sent()) { die('CRITICAL ERROR: Headers already sent. DB connection file missing.'); }
    $_SESSION['error_message'] = 'Database connection file missing. Please contact administrator.';
    header('Location: index.php');
    exit;
}
require 'db_connection.php';
require_once 'dal.php'; // Include DAL once at the top

use PhpOffice\PhpSpreadsheet\IOFactory;

$_SESSION['error_message'] = null;
$_SESSION['success_message'] = null;

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    if (headers_sent()) { die('Invalid request method and headers already sent.'); }
    $_SESSION['error_message'] = 'Invalid request method.';
    header('Location: data_entry.php');
    exit;
}

$selectedClassValue = htmlspecialchars($_POST['class_selection'] ?? '');
$yearValue = htmlspecialchars($_POST['year'] ?? '');
$termValue = htmlspecialchars($_POST['term'] ?? '');
$termEndDate = htmlspecialchars($_POST['term_end_date'] ?? '');
$nextTermBeginDate = htmlspecialchars($_POST['next_term_begin_date'] ?? '');
$teacherInitialsFromForm = $_POST['teacher_initials'] ?? [];

if (empty($selectedClassValue) || empty($yearValue) || empty($termValue) || empty($termEndDate) || empty($nextTermBeginDate)) {
    if (headers_sent()) { die('Required form fields missing and headers already sent.'); }
    $_SESSION['error_message'] = 'Class, Year, Term, Term End Date, and Next Term Begin Date are required.';
    header('Location: data_entry.php');
    exit;
}

// System is now P5-P7 only.
// Expected subject codes based on kizito_schema.sql default inserts: ENG, MTC, SCI, SST, RE
$expectedSubjectInternalKeys = ['ENG', 'MTC', 'SCI', 'SST', 'RE'];
// Assuming all these subjects are required for P5-P7 template.
$requiredSubjectInternalKeys = $expectedSubjectInternalKeys;

// Define a mapping from human-readable sheet names (as generated by download_template.php)
// to internal subject codes (as in kizito_schema.sql and used by getSubjectIdByCode).
// Sheet names are case-insensitive for matching.
$sheetNameToInternalCodeMap = [
    'english language' => 'ENG',
    'mathematics' => 'MTC',
    'science' => 'SCI',
    'social studies' => 'SST',
    'religious education' => 'RE'
];

// Validate selected class is P5, P6, or P7
if (!in_array($selectedClassValue, ['P5', 'P6', 'P7'])) {
    if (headers_sent()) { die('Invalid class selection for P5-P7 system and headers already sent.'); }
    $_SESSION['error_message'] = 'Invalid class selected. This system is configured for P5, P6, and P7 only. Selected: ' . htmlspecialchars($selectedClassValue);
    header('Location: data_entry.php');
    exit;
}

// --- New: Handle single file upload ---
if (!isset($_FILES['marks_excel_file']) || $_FILES['marks_excel_file']['error'] !== UPLOAD_ERR_OK) {
    $_SESSION['error_message'] = 'Marks Excel file is required. Error code: ' . ($_FILES['marks_excel_file']['error'] ?? 'N/A');
    header('Location: data_entry.php');
    exit;
}
$uploadedFilePath = $_FILES['marks_excel_file']['tmp_name'];
// --- End New: Handle single file upload ---

$pdo->beginTransaction();
try {
    $spreadsheet = IOFactory::load($uploadedFilePath); // Load the entire workbook

    // Validate required sheets are present
    $presentSheetNames = $spreadsheet->getSheetNames();
    $presentInternalSubjectKeys = [];
    foreach ($presentSheetNames as $sheetName) {
        $normalizedSheetName = strtolower(trim($sheetName));
        if (isset($sheetNameToInternalCodeMap[$normalizedSheetName])) {
            $presentInternalSubjectKeys[] = $sheetNameToInternalCodeMap[$normalizedSheetName];
        }
    }

    foreach ($requiredSubjectInternalKeys as $reqKey) {
        if (!in_array($reqKey, $presentInternalSubjectKeys)) {
            // Find the display name for the missing required key for a more user-friendly message
            $missingSheetDisplayName = array_search($reqKey, $sheetNameToInternalCodeMap);
            if ($missingSheetDisplayName === false) {
                $missingSheetDisplayName = $reqKey; // Fallback to internal code
            }
            $_SESSION['error_message'] = "Required subject sheet for '" . htmlspecialchars(ucwords($missingSheetDisplayName)) . "' (Code: $reqKey) is missing from the uploaded Excel file for class " . htmlspecialchars($selectedClassValue) . ".";
            header('Location: data_entry.php');
            exit;
        }
    }
    // --- End Sheet Validation ---

    $academicYearId = findOrCreateLookup($pdo, 'academic_years', 'year_name', $yearValue);
    $termId = findOrCreateLookup($pdo, 'terms', 'term_name', $termValue);
    $classId = findOrCreateLookup($pdo, 'classes', 'class_name', $selectedClassValue);

    $stmtBatch = $pdo->prepare("SELECT id FROM report_batches WHERE academic_year_id = :year_id AND term_id = :term_id AND class_id = :class_id"); // Renamed table
    $stmtBatch->execute([':year_id' => $academicYearId, ':term_id' => $termId, ':class_id' => $classId]);
    $reportBatchId = $stmtBatch->fetchColumn();

    if ($reportBatchId) {
        $stmtUpdateBatch = $pdo->prepare("UPDATE report_batches SET term_end_date = :term_end, next_term_begin_date = :next_term_begin, import_date = CURRENT_TIMESTAMP WHERE id = :id"); // Renamed table
        $stmtUpdateBatch->execute([':term_end' => $termEndDate, ':next_term_begin' => $nextTermBeginDate, ':id' => $reportBatchId]);

        // When a batch is re-imported, old scores and summaries for that batch should be cleared.
        $stmtDeleteOldScores = $pdo->prepare("DELETE FROM scores WHERE report_batch_id = :batch_id");
        $stmtDeleteOldScores->execute([':batch_id' => $reportBatchId]);

        $stmtDeleteOldSummaries = $pdo->prepare("DELETE FROM student_term_summaries WHERE report_batch_id = :batch_id"); // Renamed table
        $stmtDeleteOldSummaries->execute([':batch_id' => $reportBatchId]);
    } else {
        $stmtInsertBatch = $pdo->prepare("INSERT INTO report_batches (academic_year_id, term_id, class_id, term_end_date, next_term_begin_date) VALUES (:year_id, :term_id, :class_id, :term_end, :next_term_begin)"); // Renamed table
        $stmtInsertBatch->execute([':year_id' => $academicYearId, ':term_id' => $termId, ':class_id' => $classId, ':term_end' => $termEndDate, ':next_term_begin' => $nextTermBeginDate]);
        $reportBatchId = $pdo->lastInsertId();
    }

    if (!$reportBatchId) {
        throw new Exception("Could not create or retrieve report batch ID.");
    }

    // Iterate through each sheet in the loaded workbook
    foreach ($spreadsheet->getSheetNames() as $sheetName) {
        $normalizedSheetName = strtolower(trim($sheetName));

        // Skip the "Instructions" sheet or any other non-subject sheets
        if ($normalizedSheetName === 'instructions' || !isset($sheetNameToInternalCodeMap[$normalizedSheetName])) {
            continue;
        }

        $subjectInternalKey = $sheetNameToInternalCodeMap[$normalizedSheetName];
        $currentSheetObject = $spreadsheet->getSheetByName($sheetName); // Get sheet by its original name

        // Check if this subject is expected for the P5-P7 classes
        if (!in_array($subjectInternalKey, $expectedSubjectInternalKeys)) {
            error_log("Warning: Sheet '$sheetName' (maps to '$subjectInternalKey') is not one of the expected subjects for P5-P7. Skipping.");
            continue;
        }

        // Fetch or create subject ID
        // Use the original sheet name for user-facing messages if needed, but internal key for DB.
        $subjectDisplayNameForError = $sheetName; // Or derive from internal key if preferred for consistency

        // Get the full subject name from DB or construct it
        $stmtSubjectName = $pdo->prepare("SELECT subject_name_full FROM subjects WHERE subject_code = :code");
        $stmtSubjectName->execute([':code' => $subjectInternalKey]);
        $dbSubjectNameFull = $stmtSubjectName->fetchColumn();

        $subjectNameForLookup = $dbSubjectNameFull ?: ucfirst(str_replace('_', ' ', $subjectInternalKey));


        $subjectId = findOrCreateLookup($pdo, 'subjects', 'subject_code', $subjectInternalKey, ['subject_name_full' => $subjectNameForLookup]);
        if (!$subjectId) {
            throw new Exception("Failed to find or create subject ID for: " . htmlspecialchars($subjectDisplayNameForError) . " (using internal code: " . htmlspecialchars($subjectInternalKey) . ")");
        }

        // Headers are LIN, Names/Name, BOT, MOT, EOT in row 1
        $headerLIN = trim(strtoupper(strval($currentSheetObject->getCell('A1')->getValue())));
        $headerName = trim(strtoupper(strval($currentSheetObject->getCell('B1')->getValue())));
        $headerBOT = trim(strtoupper(strval($currentSheetObject->getCell('C1')->getValue())));
        $headerMOT = trim(strtoupper(strval($currentSheetObject->getCell('D1')->getValue())));
        $headerEOT = trim(strtoupper(strval($currentSheetObject->getCell('E1')->getValue())));

        if ($headerLIN !== 'LIN' || !in_array($headerName, ['NAMES', 'NAME']) || $headerBOT !== 'BOT' || $headerMOT !== 'MOT' || $headerEOT !== 'EOT') {
            throw new Exception("Invalid headers in sheet '" . htmlspecialchars($sheetName) . "'. Expected A1='LIN', B1='Names/Name', C1='BOT', D1='MOT', E1='EOT'. Found: $headerLIN, $headerName, $headerBOT, $headerMOT, $headerEOT");
        }

        $highestRow = $currentSheetObject->getHighestDataRow();
        $startRow = 2; // Data starts from row 2

        if ($highestRow < $startRow) {
            error_log("Warning: No student data rows found in sheet '" . htmlspecialchars($sheetName) . "'. Sheet might be empty after row 1.");
            // If this subject is required, this might be an issue.
            // For now, just continue. The earlier check for required sheets handles missing sheets.
            // This handles empty-but-present sheets.
            // All expected subjects are now required for P5-P7.
            if (in_array($subjectInternalKey, $requiredSubjectInternalKeys)) {
                 throw new Exception("Required subject sheet '" . htmlspecialchars($sheetName) . "' (mapped to code: $subjectInternalKey) is present but contains no student data.");
            }
            // If it's not in required (though currently expected == required), this continue is fine.
            // This part of the logic might be redundant if expected == required, but kept for structure.
            continue;
        }

        for ($row = $startRow; $row <= $highestRow; $row++) {
            $linValue = trim(strval($currentSheetObject->getCell('A' . $row)->getValue()));
            $studentNameRaw = trim(strval($currentSheetObject->getCell('B' . $row)->getValue()));

            if (empty($studentNameRaw)) continue; // Skip if no student name
            $studentNameAllCaps = strtoupper($studentNameRaw);
            $linToStore = !empty($linValue) ? $linValue : null;

            // Use DAL function to find or create student
            $studentId = upsertStudent($pdo, $studentNameAllCaps, $linToStore);

            if (!$studentId) {
                // If upsertStudent returns null, it means there was an error (e.g., unique constraint violation for LIN if not handled inside upsertStudent)
                // The error should have been logged by upsertStudent. We need to stop processing this student or throw an exception.
                throw new Exception("Failed to create or retrieve student '" . htmlspecialchars($studentNameRaw) . "' (LIN: " . htmlspecialchars($linToStore ?? 'N/A') . ") from sheet '" . htmlspecialchars($sheetName) . "', row " . $row . ". Check DAL logs.");
            }

            // After student is upserted, ensure their current_class_id is updated for this batch
            // This is important if a student might be processed for a different class than their 'current_class_id' in students table
            // or if current_class_id in students table is used as the primary class identifier.
            // The new schema has students.current_class_id.
            // For simplicity, we'll update it here. A more complex system might handle student transfers/class assignments separately.
            $stmtUpdateStudentClass = $pdo->prepare("UPDATE students SET current_class_id = :class_id WHERE id = :student_id");
            $stmtUpdateStudentClass->execute([':class_id' => $classId, ':student_id' => $studentId]);


            // Get scores
            $botScore = $currentSheetObject->getCell('C' . $row)->getValue();
            $motScore = $currentSheetObject->getCell('D' . $row)->getValue();
            $eotScore = $currentSheetObject->getCell('E' . $row)->getValue();

            // Use DAL function to insert/update scores
            $botScoreDb = is_numeric($botScore) ? (float)$botScore : null;
            $motScoreDb = is_numeric($motScore) ? (float)$motScore : null;
            $eotScoreDb = is_numeric($eotScore) ? (float)$eotScore : null;
            // eot_remark from Excel is not present in the template, so pass null.
            // It will be generated by run_calculations.php and stored by its own DAL call if needed there.

            if (!upsertScore($pdo, $reportBatchId, $studentId, $subjectId, $botScoreDb, $motScoreDb, $eotScoreDb, null)) {
                // upsertScore returning false indicates an error, which it should have logged.
                // We should probably roll back and stop.
                throw new Exception("Failed to save score for student '" . htmlspecialchars($studentNameRaw) . "' (ID: $studentId), subject ID: $subjectId, in sheet '" . htmlspecialchars($sheetName) . "', row " . $row . ". Check DAL logs.");
            }
        }
    } // End of loop through sheets

    $pdo->commit();
    $_SESSION['success_message'] = 'Data imported successfully from the Excel file for class ' . htmlspecialchars($selectedClassValue) . ' (Batch ID: ' . htmlspecialchars($reportBatchId) . '). Ready for next steps (calculations).';
    $_SESSION['current_teacher_initials'] = $teacherInitialsFromForm;
    $_SESSION['last_processed_batch_id'] = $reportBatchId;
    $_SESSION['batch_data_changed_for_calc'][$reportBatchId] = true; // Set flag for this batch

    // Log successful import
    if (!function_exists('logActivity')) { // Ensure dal.php was required if not already
        require_once 'dal.php';
    }
    $logDescription = "Imported data for class " . htmlspecialchars($selectedClassValue) .
                      ", term " . htmlspecialchars($termValue) .
                      ", year " . htmlspecialchars($yearValue) .
                      " (Batch ID: " . htmlspecialchars($reportBatchId) . ").";
    logActivity(
        $pdo,
        $_SESSION['user_id'] ?? null, // user_id from session
        $_SESSION['username'] ?? 'System', // username from session or 'System'
        'BATCH_DATA_IMPORTED',
        $logDescription,
        null // ip_address - passing null for now
        // 'batch', // entity_type - removed
        // $reportBatchId, // entity_id - removed
        // null // notified_user_id - removed
    );

} catch (PDOException $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    // For production, use session messages.
    $_SESSION['error_message'] = "Database error during import: " . htmlspecialchars($e->getMessage()) . " (Details logged or check code at Line: " . $e->getLine() . " in " . basename($e->getFile()) . ")";
} catch (Exception $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    $_SESSION['error_message'] = "Processing error during import: " . htmlspecialchars($e->getMessage()) . " (Details logged or check code at Line: " . $e->getLine() . " in " . basename($e->getFile()) . ")";
}

// Redirect back to data_entry.php for normal operation
header('Location: data_entry.php');
exit;
?>
